package com.medsurge.china.dir;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FileComparatorInDirectory {

	private String absolutePath = "E:/test/a";
	private boolean printDirectory = true;
	private List<File> listSrc;
	private Map<String, File> mapDest;

	public static void main(String[] args) {
		new FileComparatorInDirectory().process();
	}

	public FileComparatorInDirectory() {
		listSrc = new ArrayList<>();
		mapDest = new HashMap<String, File>();
	}

	public void process() {
		try {

			File dirSrc = new File(absolutePath);
			File dirDest = new File("E:/test/b");
			File[] dirListSrc = dirSrc.listFiles();
			File[] dirListDest = dirDest.listFiles();
			checkDirecory(dirListSrc, dirListDest);

			while (listSrc.size() > 0) {
				printDirectory = true;
				File fi1 = listSrc.remove(0);
				dirListSrc = fi1.listFiles();
				File fi2 = mapDest.remove(getAbsolutePath(fi1.getAbsolutePath()));
				dirListDest = fi2.listFiles();
				checkDirecory(dirListSrc, dirListDest);
			}

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(e.getMessage());
		}

	}

	private void checkDirecory(File[] dirListSrc, File[] dirListDest) {
		for (File f : dirListSrc) {
			if (f.isDirectory()) {
				if (isFileOrDirectoryPresent(f, dirListDest) != null) {
					listSrc.add(f);
					mapDest.put(getAbsolutePath(f.getAbsolutePath()), isFileOrDirectoryPresent(f, dirListDest));
				} else {
					printMessage("Directory missing ", f);
				}
			} else {
				if (isFileOrDirectoryPresent(f, dirListDest) == null) {
					printMessage("File missing ", f);
				}
			}
		}

	}

	private void printMessage(String string, File file) {
		if (printDirectory) {
			System.out.println("Director name ============= " + file.getParent());
			printDirectory = false;
		}
		System.out.println(string + file.getName());

	}

	private String getAbsolutePath(String absolutePath2) {
		return absolutePath2.replaceFirst(absolutePath, "");
	}

	private File isFileOrDirectoryPresent(File f, File[] dirListDest) {
		File result = null;
		for (File s : dirListDest) {
			if (f.isDirectory() && s.isDirectory() && (f.getName().endsWith(s.getName()))) {
				result = s;
				break;
			} else if (f.isFile() && s.isFile() && (f.getName().endsWith(s.getName()))) {
				result = s;
				break;
			}
		}
		return result;
	}

}
